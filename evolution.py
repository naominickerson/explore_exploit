import math
import random

sigma_m=-3.5

sigma_f=-2
mutation_rate_rate = 0.1
p_m=.5
p_f=1-p_m
threshold=50
Number_of_genes = 1000
fertile_range = {}

fertile_range[ "low" ] = 15
fertile_range[ "high"] = {"f": 35, "m":45}

class person:
    def __init__(self,year,sigma,father=None,mother=None):
        self.mygender=pick_gender()
        this_sig=getSigma(self.mygender,sigma["f"],sigma["m"])
        self.mygenes = [] 
        if father is None or mother is None:
            for i in range( 0, Number_of_genes ):
                self.mygenes.append(random.random()<.5)
        else:
            for i in range( 0, Number_of_genes ):           
                flip=random.random()<(math.tanh(this_sig)+1)/4
                self.mygenes.append((flip+(father.mygenes[i] if random.random()<.5 else mother.mygenes[i]))%2)


        self.myfitness = max([(mymean(self.mygenes)-.45),0])
        sigma_evol = lambda x: random.gauss(sigma[x],mutation_rate_rate)
        self.mysigma = sigma
        for gender in [ "f", "m" ]:
            self.mysigma[ gender ] = sigma_evol( gender )    
        self.children = 0
        self.birthday = year
        self.tooOld = 0

    def getGender(self):
        return self.mygender

    def markDelete(self):
        self.tooOld = 1

    def getFitness(self):
        return self.myfitness

    def getSigma(self,gender):
        return self.mysigma[gender]

    def getChild(self):
        children +=1

    def getChildCount(self):
        return self.children

    def getAge(self,year):
        return year - self.birthday

    def fertile(self,year):
        gender_part = self.getChildCount() == 0 if self.getGender()=="f" else True
        tooOld=self.getAge(year) > fertile_range[ "high"][ self.getGender() ]
        if tooOld:
            self.tooOld=1
        Age_part = ( self.getAge(year) > fertile_range[ "low" ] ) & (not tooOld)
        return gender_part & Age_part

class population:
    def __init__(self,N):
        self.people = []
        self.year = 0
        
        for ind in range(1,N):            
            self.people.append(person(self.year,{"f":sigma_f,"m":sigma_m}))

    def addPerson(self,person):
        self.people.append(person)

    def getMales(self):
        return [i for i in self.people if i.getGender() == "m"]
    

    def getFemales(self):
        return [i for i in self.people if i.getGender()=="f"]
    
    def increase_year(self):
        self.year +=1

        for i in range(1,10):
            females = [i for i in self.getFemales() if i.fertile(self.year)]
            mother=pick(females)
            males = [i for i in self.getMales() if i.fertile(self.year)]
            father=pick(males)
            if len(males) & len(females):
                stats=getStats(father,mother)
                self.addPerson(person(self.year,stats["sigma"],father,mother))

        for i in self.people:
            i.children = 0
            if i.tooOld:
                 self.people.remove(i)



def getStats(father,mother):
    return {"mean": mymean([father.getFitness(),mother.getFitness()]),
            "sigma":{"f":mymean([father.getSigma("f"),mother.getSigma("f")]),
            "m":mymean([father.getSigma("m"),mother.getSigma("m")])}};

def getSigma(gender,sigma_f,sigma_m):
    return[sigma_f,sigma_m][0 if pick_gender()=="f" else 1]

def mystd(l):
    nsq=sum(map( lambda x:x*x, l))/len(l)
    msq=sum(l)/len(l)
    msq*=msq
    return math.sqrt(nsq-msq)

def pick_gender():
    return "m" if random.random() > p_f else "f"

def mymean(l):
    return float(sum(l))/len(l)


def pick(population,strategy="mean"):

    if( strategy == "mean" ):
        total=sum(map(lambda x: x.getFitness(), population))
        myrange=random.random()*total
        my_sum=0
    
        for i in population:
            my_sum+=i.getFitness()
            if my_sum>=myrange:
                return i
    else:
    #print len(population)
        if len(population):
            population.sort( lambda x,y: (x.getFitness()< y.getFitness)*2-1)
            return population[0]
            
males = []
females = []
res=[]
data=[]

my_population = population(100)
for year in range(1,20000):
    my_population.increase_year()
    if  year %100  ==0:
        data+=[year,
               mymean( map( lambda x: x.getFitness(),my_population.people )),
               mystd( map( lambda x: x.getFitness(), my_population.people )),
               mymean( map( lambda x: x.getSigma("m"),my_population.people )),
               mymean( map( lambda x: x.getSigma("f"),my_population.people )),
               len( my_population.getMales()),
               len( my_population.getFemales())]

##        print "Mean fitness ", mymean( map( lambda x: x.getFitness(), my_population.people ))
##        print "Std fitness ", mystd( map( lambda x: x.getFitness(), my_population.people ))
        print "m stdv:", mymean( map( lambda x: x.getSigma("m"),my_population.people )),
##        print "f stdv:", mymean( map( lambda x: x.getSigma("f"),my_population.people ))
##        print "# of males ", len( my_population.getMales())
##        print "# of females ", len( my_population.getFemales())
        print year
        
